import Layout from "@/components/midi-sender/Layout";
import TopBar from "@/components/midi-sender/TopBar";
import { getMidiDevices, sendMidiNote as apiSendMidiNote, sendMidiCC as apiSendMidiCC } from '@/services/api';
import { Button } from "@/components/ui/button"
import {
    Select,
    SelectContent,
    SelectTrigger,
    SelectValue,
    SelectItem,
} from "@/components/ui/select"
import { Card, CardContent } from "@/components/ui/card"
import { useState, useEffect } from 'react';

export default function MainPage() {
    const [devices, setDevices] = useState<string[]>([]);
    const [error, setError] = useState<string | null>(null);
    const [midiChannel, setMidiChannel] = useState<number>(0);
    const [midiVelocity, setMidiVelocity] = useState<number>(100);

    // MIDI note mapping
    const noteToMidiNumber: { [key: string]: number } = {
        'C4': 60, 'D4': 62, 'E4': 64, 'F4': 65,
        'G4': 67, 'A4': 69, 'B4': 71, 'C5': 72
    };

    useEffect(() => {
        const fetchDevices = async () => {
            try {
                const data = await getMidiDevices();
                setDevices(data.devices);
            } catch (err) {
                setError('Failed to fetch MIDI devices');
            }
        };

        fetchDevices();
    }, []);

    const sendMidiNote = async (note: string, isNoteOn: boolean) => {
        try {
            const noteNumber = noteToMidiNumber[note];
            await apiSendMidiNote(noteNumber, midiVelocity, midiChannel, isNoteOn);
        } catch (err) {
            console.error('Error sending MIDI note:', err);
        }
    };

    const sendMidiCC = async (controller: number, value: number) => {
        try {
            await apiSendMidiCC(controller, value, midiChannel);
        } catch (err) {
            console.error('Error sending MIDI CC:', err);
        }
    };

    function onAddNewPort() {
        // TODO: Implement add new port functionality
        console.log("Add new port clicked");
    }

    return (
        <Layout 
            topBar={<TopBar />} 
            body={
                <div className="flex space-x-64 p-6">
                    <div className="space-y-3 w-64">
                        <Button className="w-full justify-start" variant="ghost">
                            <SettingsIcon className="mr-2 h-5 w-5" />
                            Settings/Preferences
                        </Button>
                    </div>
                    <div className="space-y-6 flex-1">
                        <div>
                            <h2 className="text-lg font-semibold mb-4">Available Devices</h2>
                            <div className="space-y-3">
                                {devices.length > 0 ? devices.map((device) => (
                                    <Card key={device}>
                                        <CardContent className="flex items-center p-4">
                                            <SpeakerIcon className="h-5 w-5 mr-3" />
                                            <div>
                                                <div className="font-medium">{device}</div>
                                                <div className="text-sm text-gray-500">Virtual MIDI Device</div>
                                            </div>
                                        </CardContent>
                                    </Card>
                                )) : (
                                    <div className="text-center py-4 text-gray-500">
                                        {error ? error : 'No devices found'}
                                    </div>
                                )}
                                <Button className="mt-6 w-full m-0" variant="ghost" onClick={onAddNewPort}>
                                    Add new port
                                </Button>
                            </div>
                        </div>

                        <div>
                            <h2 className="text-lg font-semibold mb-4">MIDI Controls</h2>
                            <div className="grid grid-cols-2 gap-4">
                                <Card>
                                    <CardContent className="p-4">
                                        <h3 className="font-medium mb-2">Note Controls</h3>
                                        <div className="grid grid-cols-4 gap-2">
                                            {Object.keys(noteToMidiNumber).map((note) => (
                                                <Button
                                                    key={note}
                                                    variant="outline"
                                                    className="w-full"
                                                    onMouseDown={() => sendMidiNote(note, true)}
                                                    onMouseUp={() => sendMidiNote(note, false)}
                                                    onMouseLeave={() => sendMidiNote(note, false)}
                                                >
                                                    {note}
                                                </Button>
                                            ))}
                                        </div>
                                    </CardContent>
                                </Card>

                                <Card>
                                    <CardContent className="p-4">
                                        <h3 className="font-medium mb-2">Control Settings</h3>
                                        <div className="space-y-4">
                                            <div>
                                                <label className="text-sm font-medium">Channel</label>
                                                <Select defaultValue="0" onValueChange={(value) => setMidiChannel(Number(value))}>
                                                    <SelectTrigger>
                                                        <SelectValue placeholder="Select channel" />
                                                    </SelectTrigger>
                                                    <SelectContent>
                                                        {Array.from({ length: 16 }, (_, i) => (
                                                            <SelectItem key={i} value={i.toString()}>
                                                                Channel {i + 1}
                                                            </SelectItem>
                                                        ))}
                                                    </SelectContent>
                                                </Select>
                                            </div>
                                            <div>
                                                <label className="text-sm font-medium">Velocity</label>
                                                <input
                                                    type="range"
                                                    min="0"
                                                    max="127"
                                                    defaultValue="100"
                                                    className="w-full"
                                                    onChange={(e) => setMidiVelocity(Number(e.target.value))}
                                                />
                                            </div>
                                            <div>
                                                <label className="text-sm font-medium">Pan</label>
                                                <input
                                                    type="range"
                                                    min="0"
                                                    max="127"
                                                    defaultValue="64"
                                                    className="w-full"
                                                    onChange={(e) => sendMidiCC(10, Number(e.target.value))}
                                                />
                                            </div>
                                        </div>
                                    </CardContent>
                                </Card>
                            </div>
                        </div>
                    </div>
                </div>
            }
        />
    );
}

const SettingsIcon = (props: React.SVGProps<SVGSVGElement>) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
        {...props}
    >
        <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z" />
        <circle cx="12" cy="12" r="3" />
    </svg>
)

const SpeakerIcon = (props: React.SVGProps<SVGSVGElement>) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
        {...props}
    >
        <rect width="16" height="20" x="4" y="2" rx="2" ry="2" />
        <circle cx="12" cy="14" r="4" />
        <line x1="12" x2="12" y1="6" y2="6" />
    </svg>
)
